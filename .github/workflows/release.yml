name: Manual Release

on:
  workflow_dispatch:
    inputs:
      beta_tag:
        description: 'Master prerelease tag to promote to stable (e.g., v1.1.0-master.1) or "latest" for most recent'
        required: true
        type: string
        default: 'latest'

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master
        fetch-depth: 0
        token: ${{ secrets.GH_TOKEN }}
        
    - name: Configure Git
      run: |
        git config --global user.name "github-actions[bot]"
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        
    - name: Fetch all tags
      run: |
        git fetch --tags
        echo "Available beta tags:"
        git tag -l | grep beta || echo "No beta tags found"
        echo "Latest beta tag:"
        git tag -l | grep beta | tail -1 || echo "No beta tags found"
        
    - name: Setup Node.js
      uses: actions/setup-node@v6
      with:
        node-version: '22.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build packages
      run: npm run build
      
      
    - name: Determine beta tag to promote
      run: |
        if [ "${{ github.event.inputs.beta_tag }}" = "latest" ]; then
          # Get the latest master prerelease tag
          BETA_TAG=$(git tag -l | grep master | tail -1)
          if [ -z "$BETA_TAG" ]; then
            echo "No master prerelease tags found!"
            exit 1
          fi
          echo "Using latest master prerelease tag: $BETA_TAG"
        else
          BETA_TAG="${{ github.event.inputs.beta_tag }}"
          echo "Using specified tag: $BETA_TAG"
        fi
        
        # Validate the tag exists
        if ! git tag -l | grep -q "^$BETA_TAG$"; then
          echo "Tag $BETA_TAG does not exist!"
          echo "Available master prerelease tags:"
          git tag -l | grep master
          exit 1
        fi
        
        # Extract stable version from beta tag (remove -master.X)
        STABLE_VERSION=$(echo $BETA_TAG | sed 's/^v//' | sed 's/-master\.[0-9]*$//')
        STABLE_TAG="v$STABLE_VERSION"
        
        echo "BETA_TAG=$BETA_TAG" >> $GITHUB_ENV
        echo "STABLE_VERSION=$STABLE_VERSION" >> $GITHUB_ENV
        echo "STABLE_TAG=$STABLE_TAG" >> $GITHUB_ENV
        
        echo "Will promote $BETA_TAG to $STABLE_TAG"
        
    - name: Promote beta to stable
      run: |
        echo "Promoting $BETA_TAG to stable release $STABLE_TAG"
        
        # Checkout the beta tag
        git checkout $BETA_TAG
        
        # Create a new branch from this tag
        git checkout -b release-$STABLE_TAG
        
        # Change to the frey package directory
        cd packages/frey
        
        # Update package.json to the stable version
        npm version $STABLE_VERSION --no-git-tag-version
        
        # Go back to root and commit the changes
        cd ../..
        git add packages/frey/package.json
        git commit -m "chore(release): $STABLE_TAG [skip ci]"
        
        # Create the stable tag
        git tag $STABLE_TAG
        
        # Use semantic-release to publish (this will handle npm publishing and tag pushing)
        npx semantic-release
        
        echo "Successfully promoted $BETA_TAG to $STABLE_TAG"
      env:
        GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        GITHUB_REF: refs/heads/master
