import { describe, it, expect, beforeEach, afterEach } from "vitest";
import { z } from "zod";
import Fastify from "fastify";
import { startServer, type ServerOptions } from "../../src/main.js";
import { defineEntity } from "../../src/entity.js";

describe("Swagger Integration Tests", () => {
  let fastify: any;
  let server: any;

  const userSchema = z.object({
    id: z.string(),
    name: z.string(),
    email: z.string().email(),
    createdAt: z.date(),
  });

  const userEntity = defineEntity({
    name: "user",
    schema: userSchema,
    customId: "id",
    customRoutes: [
      {
        path: "/stats",
        method: "GET",
        registerRoute: async (request, reply) => {
          reply.send({ totalUsers: 42, activeUsers: 38 });
        },
      },
    ],
    findAll: async () => [
      {
        id: "1",
        name: "John Doe",
        email: "john@example.com",
        createdAt: new Date("2023-01-01"),
      },
    ],
    findOne: async () => ({
      id: "1",
      name: "John Doe",
      email: "john@example.com",
      createdAt: new Date("2023-01-01"),
    }),
    create: async (params) => ({
      id: "2",
      name: params.name as string,
      email: params.email as string,
      createdAt: new Date(),
    }),
    update: async (params) => ({
      id: params.id as string,
      name: params.name as string,
      email: params.email as string,
      createdAt: new Date("2023-01-01"),
    }),
    delete: async () => {},
  });

  beforeEach(async () => {
    fastify = Fastify({ logger: false });
  });

  afterEach(async () => {
    if (server) {
      await server.close();
    }
  });

  describe("Swagger UI endpoints", () => {
    it("should serve swagger UI at default route", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0, // Use random port
        swagger: {
          enabled: true,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/documentation`);
      expect(response.status).toBe(200);
      expect(response.headers.get("content-type")).toContain("text/html");
    });

    it("should serve swagger UI at custom route", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
          routePrefix: "/api-docs",
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/api-docs`);
      expect(response.status).toBe(200);
      expect(response.headers.get("content-type")).toContain("text/html");
    });

    it("should not serve swagger UI when disabled", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: false,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/documentation`);
      expect(response.status).toBe(404);
    });
  });

  describe("OpenAPI schema generation", () => {
    it("should generate OpenAPI schema with entity routes", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/documentation/json`);
      expect(response.status).toBe(200);

      const schema = await response.json();
      expect(schema).toMatchObject({
        openapi: "3.0.0",
        info: {
          title: "Frey API",
          description: "Entity-driven API generated by Frey framework",
          version: "1.0.0",
        },
        paths: expect.objectContaining({
          "/user": expect.objectContaining({
            get: expect.objectContaining({
              summary: "Get all users",
              tags: ["user"],
            }),
          }),
          "/user/{id}": expect.objectContaining({
            get: expect.objectContaining({
              summary: "Get a user by ID",
              tags: ["user"],
            }),
          }),
          "/user/stats": expect.objectContaining({
            get: expect.objectContaining({
              summary: "Custom GET route for user",
              tags: ["user", "custom"],
            }),
          }),
        }),
        tags: [
          { name: "user", description: "user operations" },
        ],
      });
    });

    it("should include custom swagger configuration in schema", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
          title: "Custom User API",
          description: "API for managing users",
          version: "2.0.0",
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/documentation/json`);
      expect(response.status).toBe(200);

      const schema = await response.json();
      expect(schema.info).toMatchObject({
        title: "Custom User API",
        description: "API for managing users",
        version: "2.0.0",
      });
    });
  });

  describe("API routes with OpenAPI documentation", () => {
    it("should serve API routes with proper OpenAPI documentation", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      // Test GET /user
      const findAllResponse = await fetch(`http://localhost:${port}/user`);
      expect(findAllResponse.status).toBe(200);
      const users = await findAllResponse.json();
      expect(Array.isArray(users)).toBe(true);

      // Test GET /user/{id}
      const findOneResponse = await fetch(`http://localhost:${port}/user/1`);
      expect(findOneResponse.status).toBe(200);
      const user = await findOneResponse.json();
      expect(user).toHaveProperty("id");
      expect(user).toHaveProperty("name");
      expect(user).toHaveProperty("email");

      // Test custom route
      const customResponse = await fetch(`http://localhost:${port}/user/stats`);
      expect(customResponse.status).toBe(200);
      const stats = await customResponse.json();
      expect(stats).toHaveProperty("totalUsers");
      expect(stats).toHaveProperty("activeUsers");
    });

    it("should handle query parameters with OpenAPI documentation", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      // Test with query parameters
      const response = await fetch(`http://localhost:${port}/user?limit=10&offset=0&search=john`);
      expect(response.status).toBe(200);
      const users = await response.json();
      expect(Array.isArray(users)).toBe(true);
    });
  });

  describe("Error responses with OpenAPI documentation", () => {
    it("should document error responses in OpenAPI schema", async () => {
      const options: ServerOptions = {
        entities: [userEntity],
        port: 0,
        swagger: {
          enabled: true,
        },
      };

      await startServer(fastify, options);
      const port = fastify.server.address()?.port;

      const response = await fetch(`http://localhost:${port}/documentation/json`);
      expect(response.status).toBe(200);

      const schema = await response.json();
      
      // Check that error responses are documented
      expect(schema.paths["/user"].get.responses).toMatchObject({
        "200": expect.any(Object),
        "400": expect.any(Object),
        "401": expect.any(Object),
        "403": expect.any(Object),
        "404": expect.any(Object),
        "500": expect.any(Object),
      });

      expect(schema.paths["/user/{id}"].get.responses).toMatchObject({
        "200": expect.any(Object),
        "400": expect.any(Object),
        "401": expect.any(Object),
        "403": expect.any(Object),
        "404": expect.any(Object),
        "500": expect.any(Object),
      });
    });
  });
});
