import { type FastifyInstance } from "fastify";
import { z } from "zod";
import type { Entity } from "./entity.js";
import {
  registerFindAllRoute,
  registerFindOneRoute,
  registerCreateRoute,
  registerUpdateRoute,
  registerDeleteRoute,
  registerCustomRoutes,
} from "./routes/index.js";

export type ServerOptions<
  T extends readonly Entity<z.ZodObject<any>>[] = readonly Entity<
    z.ZodObject<any>
  >[],
> = {
  port?: number;
  host?: string;
  entities: T;
};

let server: FastifyInstance;
let entities: Map<string, Entity<z.ZodObject<any>>>;

export const startServer = async <
  T extends readonly Entity<z.ZodObject<any>>[],
>(
  fastify: FastifyInstance,
  opts: ServerOptions<T>,
) => {
  server = fastify;
  entities = new Map();

  // Register Swagger documentation
  const swagger = await import("@fastify/swagger");
  await fastify.register(swagger.default, {
    openapi: {
      openapi: "3.0.0",
      info: {
        title: "Frey API",
        description: "Entity-driven API generated by Frey framework",
        version: "1.0.0",
      },
      servers: [
        {
          url: `http://${opts.host ?? "localhost"}:${opts.port ?? 3000}`,
          description: "Development server",
        },
      ],
      tags: opts.entities.map((entity) => ({
        name: entity.name,
        description: `${entity.name} operations`,
      })),
    },
  });

  // Register Swagger UI
  const swaggerUi = await import("@fastify/swagger-ui");
  await fastify.register(swaggerUi.default, {
    routePrefix: "/documentation",
    uiConfig: {
      docExpansion: "full",
      deepLinking: false,
    },
    uiHooks: {
      onRequest: function (request: any, reply: any, next: any) {
        next();
      },
      preHandler: function (request: any, reply: any, next: any) {
        next();
      },
    },
    staticCSP: true,
    transformStaticCSP: (header: any) => header,
    transformSpecification: (swaggerObject: any, request: any, reply: any) => {
      return swaggerObject;
    },
    transformSpecificationClone: true,
  });

  opts.entities.forEach((entity) => {
    entities.set(entity.name, entity);

    // Register all CRUD routes
    registerFindAllRoute(server, entity);
    registerFindOneRoute(server, entity);
    registerCreateRoute(server, entity);
    registerUpdateRoute(server, entity);
    registerDeleteRoute(server, entity);

    // Register custom routes
    registerCustomRoutes(server, entity);
  });

  try {
    await fastify.listen({ port: opts.port ?? 3000, host: opts.host });
    fastify.log.info(`Server listening on http://${opts.host ?? "localhost"}:${opts.port ?? 3000}`);
    fastify.log.info(`API documentation available at http://${opts.host ?? "localhost"}:${opts.port ?? 3000}/documentation`);
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};
