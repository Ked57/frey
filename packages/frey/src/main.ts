import { type FastifyInstance } from "fastify";
import { z } from "zod";
import type { Entity } from "./entity.js";
import {
  registerFindAllRoute,
  registerFindOneRoute,
  registerCreateRoute,
  registerUpdateRoute,
  registerDeleteRoute,
  registerCustomRoutes,
} from "./routes/index.js";

export type SwaggerConfig = {
  enabled?: boolean;
  title?: string;
  description?: string;
  version?: string;
  routePrefix?: string;
  uiConfig?: {
    docExpansion?: "list" | "full" | "none";
    deepLinking?: boolean;
  };
};

export type ServerOptions<
  T extends readonly Entity<z.ZodObject<any>>[] = readonly Entity<
    z.ZodObject<any>
  >[],
> = {
  port?: number;
  host?: string;
  entities: T;
  swagger?: SwaggerConfig;
};

let server: FastifyInstance;
let entities: Map<string, Entity<z.ZodObject<any>>>;

export const startServer = async <
  T extends readonly Entity<z.ZodObject<any>>[],
>(
  fastify: FastifyInstance,
  opts: ServerOptions<T>,
) => {
  server = fastify;
  entities = new Map();

  // Register Swagger documentation if enabled
  if (opts.swagger?.enabled !== false) {
    const swagger = await import("@fastify/swagger");
    await fastify.register(swagger.default, {
      openapi: {
        openapi: "3.0.0",
        info: {
          title: opts.swagger?.title ?? "Frey API",
          description: opts.swagger?.description ?? "Entity-driven API generated by Frey framework",
          version: opts.swagger?.version ?? "1.0.0",
        },
        servers: [
          {
            url: `http://${opts.host ?? "localhost"}:${opts.port ?? 3000}`,
            description: "Development server",
          },
        ],
        tags: opts.entities.map((entity) => ({
          name: entity.name,
          description: `${entity.name} operations`,
        })),
      },
    });

    // Register Swagger UI only if not explicitly disabled
    if (opts.swagger?.enabled === true) {
      const swaggerUi = await import("@fastify/swagger-ui");
      await fastify.register(swaggerUi.default, {
        routePrefix: opts.swagger?.routePrefix ?? "/documentation",
        uiConfig: {
          docExpansion: opts.swagger?.uiConfig?.docExpansion ?? "full",
          deepLinking: opts.swagger?.uiConfig?.deepLinking ?? false,
        },
        uiHooks: {
          onRequest: function (request: any, reply: any, next: any) {
            next();
          },
          preHandler: function (request: any, reply: any, next: any) {
            next();
          },
        },
        staticCSP: true,
        transformStaticCSP: (header: any) => header,
        transformSpecification: (swaggerObject: any, request: any, reply: any) => {
          return swaggerObject;
        },
        transformSpecificationClone: true,
      });
    }
  }

  opts.entities.forEach((entity) => {
    entities.set(entity.name, entity);

    // Register all CRUD routes
    registerFindAllRoute(server, entity);
    registerFindOneRoute(server, entity);
    registerCreateRoute(server, entity);
    registerUpdateRoute(server, entity);
    registerDeleteRoute(server, entity);

    // Register custom routes
    registerCustomRoutes(server, entity);
  });

  try {
    await fastify.listen({ port: opts.port ?? 3000, host: opts.host });
    fastify.log.info(`Server listening on http://${opts.host ?? "localhost"}:${opts.port ?? 3000}`);
    
    if (opts.swagger?.enabled !== false) {
      const routePrefix = opts.swagger?.routePrefix ?? "/documentation";
      fastify.log.info(`API documentation available at http://${opts.host ?? "localhost"}:${opts.port ?? 3000}${routePrefix}`);
    }
  } catch (err) {
    fastify.log.error(err);
    process.exit(1);
  }
};
